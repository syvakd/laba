import streamlit as st
import pandas as pd
import numpy as np

# –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–º—É –Ω–∞ –±—ñ–ª—É
st.set_theme('base')

# --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ---
st.title("üì¶ –ú–æ–¥–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–ø–∞—Å–∞–º–∏")

# --- –í–≤—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ ---
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–¥–µ–ª—ñ")
reorder_point = st.sidebar.number_input("–¢–æ—á–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", min_value=0)
order_quantity = st.sidebar.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", min_value=1)
lead_time = st.sidebar.number_input("–ß–∞—Å –ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è (–¥–Ω—ñ)", min_value=0)
daily_demand = st.sidebar.number_input("–°–µ—Ä–µ–¥–Ω—ñ–π —â–æ–¥–µ–Ω–Ω–∏–π –ø–æ–ø–∏—Ç", min_value=0.0)
demand_std = st.sidebar.number_input("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –ø–æ–ø–∏—Ç—É", min_value=0.0)

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É ---
if "stock_level" not in st.session_state:
    st.session_state.stock_level = 100
if "orders" not in st.session_state:
    st.session_state.orders = []
if "inventory_history" not in st.session_state:
    st.session_state.inventory_history = []
if "stockouts" not in st.session_state:
    st.session_state.stockouts = 0
if "days_to_stockout" not in st.session_state:
    st.session_state.days_to_stockout = "-"

# --- –°–∏–º—É–ª—è—Ü—ñ—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è ---
if st.button("–°–∏–º—É–ª—é–≤–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å"):
    consumption = max(0, np.random.normal(daily_demand, demand_std))
    st.session_state.stock_level -= consumption

    # –ó–∞–ø–∏—Å —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–ø–∞—Å—ñ–≤
    st.session_state.inventory_history.append(st.session_state.stock_level)

    # –î–µ—Ñ—ñ—Ü–∏—Ç
    if st.session_state.stock_level <= 0:
        st.session_state.stockouts += 1
        st.session_state.days_to_stockout = 0
    else:
        if isinstance(st.session_state.days_to_stockout, int):
            st.session_state.days_to_stockout += 1
        else:
            st.session_state.days_to_stockout = 1

    # –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è, —è–∫—â–æ –∑–∞–ø–∞—Å –Ω–∏–∂—á–µ —Ç–æ—á–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    if st.session_state.stock_level <= reorder_point:
        st.session_state.orders.append({
            "–¥–∞—Ç–∞": pd.Timestamp.now(),
            "–∫—ñ–ª—å–∫—ñ—Å—Ç—å": order_quantity
        })
        st.session_state.stock_level += order_quantity

# --- –í–∏–≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è –∑–∞–ø–∞—Å—ñ–≤ ---
st.subheader("üìä –ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –∑–∞–ø–∞—Å—ñ–≤:")
st.metric("–ó–∞–ø–∞—Å–∏", f"{st.session_state.stock_level:.0f} –æ–¥.")

# --- –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å ---
st.subheader("üìù –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å:")
if st.session_state.orders:
    st.dataframe(pd.DataFrame(st.session_state.orders))
else:
    st.info("–ó–∞–º–æ–≤–ª–µ–Ω—å —â–µ –Ω–µ –±—É–ª–æ.")

# --- –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ ---
current_inventory = round(st.session_state.stock_level, 2)
inventory_history = st.session_state.inventory_history
stockouts = st.session_state.stockouts
days_simulated = len(inventory_history)
days_to_stockout = st.session_state.days_to_stockout

avg_inventory = round(sum(inventory_history) / len(inventory_history), 2) if inventory_history else "-"
stockout_rate = round((stockouts / days_simulated) * 100, 2) if days_simulated > 0 else "-"

# --- –í–∏–≤—ñ–¥ –º–µ—Ç—Ä–∏–∫ ---
st.subheader("üìà –ö–ª—é—á–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:")
col1, col2, col3, col4 = st.columns(4)
col1.metric("–ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –∑–∞–ø–∞—Å—ñ–≤", current_inventory)
col2.metric("–°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å –∑–∞–ø–∞—Å—ñ–≤", avg_inventory)
col3.metric("–ß–∞—Å—Ç–æ—Ç–∞ –¥–µ—Ñ—ñ—Ü–∏—Ç—É (%)", stockout_rate)
col4.metric("–î–Ω—ñ–≤ –¥–æ –¥–µ—Ñ—ñ—Ü–∏—Ç—É", days_to_stockout)
